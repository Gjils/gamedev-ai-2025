import json
import subprocess
import os
from time import sleep
from dotenv import load_dotenv

from generate import generate_rpg_quest
from process import GameValidator

script_dir = os.path.dirname(os.path.abspath(__file__))
load_dotenv()
def generate_quest_with_validation(quest_name, user_prompt, system_prompt, credentials, max_retries=3):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–≤–µ—Å—Ç —á–µ—Ä–µ–∑ process.py, –∫–æ—Ç–æ—Ä—ã–π:
    1. –ß–∏—Ç–∞–µ—Ç text_output/{quest_name}.txt
    2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ JSON
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ generated_quests/{quest_name}.json
    4. –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é

    –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ stderr –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–∞ (–¥–æ max_retries —Ä–∞–∑)
    """

    validator = GameValidator()
    retry_count = 0

    while retry_count < max_retries:
        try:
            print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç: {quest_name}")
            quest = generate_rpg_quest(user_prompt=user_prompt, system_prompt=system_prompt, credentials=credentials)

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç: {quest_name} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})")

            success, message = validator.validate_data(quest)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success:
                print(f"‚úÖ –ö–≤–µ—Å—Ç {quest_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω!")
                return quest, ""

            print("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            print(message)

            retry_count += 1
            if retry_count < max_retries:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})")

                quest = generate_rpg_quest(user_prompt=user_prompt, system_prompt=system_prompt, credentials=credentials)

                print("–ö–≤–µ—Å—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                sleep(1)
                continue

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None, str(e)

    print(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries})")
    return None, "max_retries_exceeded"

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º example-3
if __name__ == "__main__":
    quest_name = "example-3"
    max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    credentials = os.getenv("GIGACHAT_CREDENTIALS")  # –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ GigaChat
    user_prompt_path = os.path.join(script_dir, "input", "example-3.txt")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–æ–º–ø—Ç–æ–º
    system_prompt_path = os.path.join(script_dir, "system_prompt.txt")
    gen_quests_path = os.path.join(script_dir, "generated_quests")
    print(f"–ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–≤–µ—Å—Ç–∞: {quest_name}")
    print("=" * 50)

    with open(user_prompt_path, "r", encoding="utf-8") as f:
        user_prompt = f.read()

    with open(system_prompt_path, "r", encoding="utf-8") as f:
        system_prompt = f.read()

    quest, errors = generate_quest_with_validation(
        quest_name=quest_name,
        max_retries=max_retries,
        credentials=credentials,
        user_prompt=user_prompt,
        system_prompt=system_prompt
    )

    if errors == "":
        print("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        output_file = os.path.join(gen_quests_path, f"{quest_name}.json")
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(json.dumps(quest, ensure_ascii=False, indent=4))
        print(f"–ö–≤–µ—Å—Ç {quest_name} –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ {output_file}")
    else:
        print("\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
